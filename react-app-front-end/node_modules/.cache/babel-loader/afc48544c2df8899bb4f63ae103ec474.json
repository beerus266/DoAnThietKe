{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Victor Dibia.\n * Handtrack.js - A library for prototyping realtime hand tracking using neural networks.\n * Licensed under the MIT License (the \"License\"); \n * Code snippets from the tensorflow coco-ssd example are reused here - https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs';\nconst basePath = \"https://cdn.jsdelivr.net/npm/handtrackjs/models/web/\";\nconst defaultParams = {\n  flipHorizontal: true,\n  outputStride: 16,\n  imageScaleFactor: 0.7,\n  maxNumBoxes: 20,\n  iouThreshold: 0.5,\n  scoreThreshold: 0.99,\n  modelType: \"ssdlitemobilenetv2\"\n};\nexport async function load(params) {\n  let modelParams = Object.assign({}, defaultParams, params); // console.log(modelParams) \n\n  const objectDetection = new ObjectDetection(modelParams);\n  await objectDetection.load();\n  return objectDetection;\n}\nexport function startVideo(video) {\n  // Video must have height and width in order to be used as input for NN\n  // Aspect ratio of 3/4 is used to support safari browser.\n  video.width = video.width || 640;\n  video.height = video.height || video.width * (3 / 4);\n  return new Promise(function (resolve, reject) {\n    navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        facingMode: \"user\"\n      }\n    }).then(stream => {\n      window.localStream = stream;\n      video.srcObject = stream;\n\n      video.onloadedmetadata = () => {\n        video.play();\n        resolve(true);\n      };\n    }).catch(function (err) {\n      resolve(false);\n    });\n  });\n}\nexport async function stopVideo() {\n  if (window.localStream) {\n    window.localStream.getTracks().forEach(track => {\n      track.stop();\n      return true;\n    });\n  } else {\n    return false;\n  }\n}\nexport class ObjectDetection {\n  constructor(modelParams) {\n    this.modelPath = basePath + modelParams.modelType + \"/tensorflowjs_model.pb\";\n    this.weightPath = basePath + modelParams.modelType + \"/weights_manifest.json\";\n    this.modelParams = modelParams;\n  }\n\n  async load() {\n    this.fps = 0;\n    this.model = await tf.loadFrozenModel(this.modelPath, this.weightPath); // Warmup the model.\n\n    const result = await this.model.executeAsync(tf.zeros([1, 300, 300, 3]));\n    result.map(async t => await t.data());\n    result.map(async t => t.dispose()); // console.log(\"model loaded and warmed up\")\n  }\n\n  async detect(input) {\n    let timeBegin = Date.now();\n    const [height, width] = getInputTensorDimensions(input);\n    const resizedHeight = getValidResolution(this.modelParams.imageScaleFactor, height, this.modelParams.outputStride);\n    const resizedWidth = getValidResolution(this.modelParams.imageScaleFactor, width, this.modelParams.outputStride);\n    const batched = tf.tidy(() => {\n      const imageTensor = tf.fromPixels(input);\n\n      if (this.modelParams.flipHorizontal) {\n        return imageTensor.reverse(1).resizeBilinear([resizedHeight, resizedWidth]).expandDims(0);\n      } else {\n        return imageTensor.resizeBilinear([resizedHeight, resizedWidth]).expandDims(0);\n      }\n    }); // const result = await this.model.executeAsync(batched);\n\n    self = this;\n    return this.model.executeAsync(batched).then(function (result) {\n      const scores = result[0].dataSync();\n      const boxes = result[1].dataSync(); // clean the webgl tensors\n\n      batched.dispose();\n      tf.dispose(result); // console.log(\"scores result\",scores, boxes)\n\n      const [maxScores, classes] = calculateMaxScores(scores, result[0].shape[1], result[0].shape[2]);\n      const prevBackend = tf.getBackend(); // run post process in cpu\n\n      tf.setBackend('cpu');\n      const indexTensor = tf.tidy(() => {\n        const boxes2 = tf.tensor2d(boxes, [result[1].shape[1], result[1].shape[3]]);\n        return tf.image.nonMaxSuppression(boxes2, scores, self.modelParams.maxNumBoxes, // maxNumBoxes\n        self.modelParams.iouThreshold, // iou_threshold\n        self.modelParams.scoreThreshold // score_threshold\n        );\n      });\n      const indexes = indexTensor.dataSync();\n      indexTensor.dispose(); // restore previous backend\n\n      tf.setBackend(prevBackend);\n      const predictions = self.buildDetectedObjects(width, height, boxes, scores, indexes, classes);\n      let timeEnd = Date.now();\n      self.fps = Math.round(1000 / (timeEnd - timeBegin));\n      return predictions;\n    });\n  }\n\n  buildDetectedObjects(width, height, boxes, scores, indexes, classes) {\n    const count = indexes.length;\n    const objects = [];\n\n    for (let i = 0; i < count; i++) {\n      const bbox = [];\n\n      for (let j = 0; j < 4; j++) {\n        bbox[j] = boxes[indexes[i] * 4 + j];\n      }\n\n      const minY = bbox[0] * height;\n      const minX = bbox[1] * width;\n      const maxY = bbox[2] * height;\n      const maxX = bbox[3] * width;\n      bbox[0] = minX;\n      bbox[1] = minY;\n      bbox[2] = maxX - minX;\n      bbox[3] = maxY - minY;\n      objects.push({\n        bbox: bbox,\n        class: classes[indexes[i]],\n        score: scores[indexes[i]]\n      });\n    }\n\n    return objects;\n  }\n\n  getFPS() {\n    return this.fps;\n  }\n\n  setModelParameters(params) {\n    this.modelParams = Object.assign({}, this.modelParams, params);\n  }\n\n  getModelParameters() {\n    return this.modelParams;\n  }\n\n  renderPredictions(predictions, canvas, context, mediasource) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvas.width = mediasource.width;\n    canvas.height = mediasource.height; // console.log(\"render\", mediasource.width, mediasource.height)\n\n    context.save();\n\n    if (this.modelParams.flipHorizontal) {\n      context.scale(-1, 1);\n      context.translate(-mediasource.width, 0);\n    }\n\n    context.drawImage(mediasource, 0, 0, mediasource.width, mediasource.height);\n    context.restore();\n    context.font = '10px Arial'; // console.log('number of detections: ', predictions.length);\n\n    for (let i = 0; i < predictions.length; i++) {\n      context.beginPath();\n      context.fillStyle = \"rgba(255, 255, 255, 0.6)\";\n      context.fillRect(predictions[i].bbox[0], predictions[i].bbox[1] - 17, predictions[i].bbox[2], 17);\n      context.rect(...predictions[i].bbox); // draw a dot at the center of bounding box\n\n      context.lineWidth = 1;\n      context.strokeStyle = '#0063FF';\n      context.fillStyle = \"#0063FF\"; // \"rgba(244,247,251,1)\";\n\n      context.fillRect(predictions[i].bbox[0] + predictions[i].bbox[2] / 2, predictions[i].bbox[1] + predictions[i].bbox[3] / 2, 5, 5);\n      context.stroke();\n      context.fillText(predictions[i].score.toFixed(3) + ' ' + \" | hand\", predictions[i].bbox[0] + 5, predictions[i].bbox[1] > 10 ? predictions[i].bbox[1] - 5 : 10);\n    } // Write FPS to top left\n\n\n    context.font = \"bold 12px Arial\";\n    context.fillText(\"[FPS]: \" + this.fps, 10, 20);\n  }\n\n  dispose() {\n    if (this.model) {\n      this.model.dispose();\n    }\n  }\n\n}\n\nfunction getValidResolution(imageScaleFactor, inputDimension, outputStride) {\n  const evenResolution = inputDimension * imageScaleFactor - 1;\n  return evenResolution - evenResolution % outputStride + 1;\n}\n\nfunction getInputTensorDimensions(input) {\n  return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] : [input.height, input.width];\n}\n\nfunction calculateMaxScores(scores, numBoxes, numClasses) {\n  const maxes = [];\n  const classes = [];\n\n  for (let i = 0; i < numBoxes; i++) {\n    let max = Number.MIN_VALUE;\n    let index = -1;\n\n    for (let j = 0; j < numClasses; j++) {\n      if (scores[i * numClasses + j] > max) {\n        max = scores[i * numClasses + j];\n        index = j;\n      }\n    }\n\n    maxes[i] = max;\n    classes[i] = index;\n  } // console.log([maxes, classes])\n\n\n  return [maxes, classes];\n}","map":{"version":3,"sources":["D:/FourthYearBK/Semester2/ProjectFinal/Project/react-app-front-end/node_modules/handtrackjs/src/index.js"],"names":["tf","basePath","defaultParams","flipHorizontal","outputStride","imageScaleFactor","maxNumBoxes","iouThreshold","scoreThreshold","modelType","load","params","modelParams","Object","assign","objectDetection","ObjectDetection","startVideo","video","width","height","Promise","resolve","reject","navigator","mediaDevices","getUserMedia","audio","facingMode","then","stream","window","localStream","srcObject","onloadedmetadata","play","catch","err","stopVideo","getTracks","forEach","track","stop","constructor","modelPath","weightPath","fps","model","loadFrozenModel","result","executeAsync","zeros","map","t","data","dispose","detect","input","timeBegin","Date","now","getInputTensorDimensions","resizedHeight","getValidResolution","resizedWidth","batched","tidy","imageTensor","fromPixels","reverse","resizeBilinear","expandDims","self","scores","dataSync","boxes","maxScores","classes","calculateMaxScores","shape","prevBackend","getBackend","setBackend","indexTensor","boxes2","tensor2d","image","nonMaxSuppression","indexes","predictions","buildDetectedObjects","timeEnd","Math","round","count","length","objects","i","bbox","j","minY","minX","maxY","maxX","push","class","score","getFPS","setModelParameters","getModelParameters","renderPredictions","canvas","context","mediasource","clearRect","save","scale","translate","drawImage","restore","font","beginPath","fillStyle","fillRect","rect","lineWidth","strokeStyle","stroke","fillText","toFixed","inputDimension","evenResolution","Tensor","numBoxes","numClasses","maxes","max","Number","MIN_VALUE","index"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Victor Dibia.\n * Handtrack.js - A library for prototyping realtime hand tracking using neural networks.\n * Licensed under the MIT License (the \"License\"); \n * Code snippets from the tensorflow coco-ssd example are reused here - https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd\n * =============================================================================\n */\n\n\nimport * as tf from '@tensorflow/tfjs';\n\nconst basePath = \"https://cdn.jsdelivr.net/npm/handtrackjs/models/web/\"\n\nconst defaultParams = {\n  flipHorizontal: true,\n  outputStride: 16,\n  imageScaleFactor: 0.7,\n  maxNumBoxes: 20,\n  iouThreshold: 0.5,\n  scoreThreshold: 0.99,\n  modelType: \"ssdlitemobilenetv2\"\n}\n\nexport async function load(params) {\n  let modelParams = Object.assign({}, defaultParams, params);\n  // console.log(modelParams) \n  const objectDetection = new ObjectDetection(modelParams);\n  await objectDetection.load();\n  return (objectDetection);\n}\n\nexport function startVideo(video) {\n  // Video must have height and width in order to be used as input for NN\n  // Aspect ratio of 3/4 is used to support safari browser.\n  video.width = video.width || 640;\n  video.height = video.height || video.width * (3 / 4)\n\n  return new Promise(function (resolve, reject) {\n    navigator.mediaDevices\n      .getUserMedia({\n        audio: false,\n        video: {\n          facingMode: \"user\"\n        }\n      })\n      .then(stream => {\n        window.localStream = stream;\n        video.srcObject = stream\n        video.onloadedmetadata = () => {\n          video.play()\n          resolve(true)\n        }\n      }).catch(function (err) {\n        resolve(false)\n      });\n  });\n\n}\n\nexport async function stopVideo() {\n  if (window.localStream) {\n    window.localStream.getTracks().forEach((track) => {\n      track.stop();\n      return true;\n    });\n  } else {\n    return false;\n  }\n}\n\nexport class ObjectDetection {\n  constructor(modelParams) {\n    this.modelPath = basePath + modelParams.modelType + \"/tensorflowjs_model.pb\";\n    this.weightPath = basePath + modelParams.modelType + \"/weights_manifest.json\";\n    this.modelParams = modelParams\n  }\n\n  async load() {\n    this.fps = 0\n    this.model = await tf.loadFrozenModel(this.modelPath, this.weightPath);\n\n    // Warmup the model.\n    const result = await this.model.executeAsync(tf.zeros([1, 300, 300, 3]));\n    result.map(async (t) => await t.data());\n    result.map(async (t) => t.dispose());\n    // console.log(\"model loaded and warmed up\")\n  }\n\n  async detect(input) {\n\n    let timeBegin = Date.now()\n    const [height, width] = getInputTensorDimensions(input);\n    const resizedHeight = getValidResolution(this.modelParams.imageScaleFactor, height, this.modelParams.outputStride);\n    const resizedWidth = getValidResolution(this.modelParams.imageScaleFactor, width, this.modelParams.outputStride);\n\n    const batched = tf.tidy(() => {\n      const imageTensor = tf.fromPixels(input)\n      if (this.modelParams.flipHorizontal) {\n        return imageTensor.reverse(1).resizeBilinear([resizedHeight, resizedWidth]).expandDims(0);\n      } else {\n        return imageTensor.resizeBilinear([resizedHeight, resizedWidth]).expandDims(0);\n      }\n    })\n\n    // const result = await this.model.executeAsync(batched);\n    self = this\n    return this.model.executeAsync(batched).then(function (result) {\n\n\n      const scores = result[0].dataSync()\n      const boxes = result[1].dataSync()\n\n      // clean the webgl tensors\n      batched.dispose()\n      tf.dispose(result)\n\n      // console.log(\"scores result\",scores, boxes)\n\n      const [maxScores, classes] = calculateMaxScores(scores, result[0].shape[1], result[0].shape[2]);\n      const prevBackend = tf.getBackend()\n      // run post process in cpu\n      tf.setBackend('cpu')\n      const indexTensor = tf.tidy(() => {\n        const boxes2 = tf.tensor2d(boxes, [\n          result[1].shape[1],\n          result[1].shape[3]\n        ])\n        return tf.image.nonMaxSuppression(\n          boxes2,\n          scores,\n          self.modelParams.maxNumBoxes, // maxNumBoxes\n          self.modelParams.iouThreshold, // iou_threshold\n          self.modelParams.scoreThreshold // score_threshold\n        )\n      })\n      const indexes = indexTensor.dataSync()\n      indexTensor.dispose()\n      // restore previous backend\n      tf.setBackend(prevBackend)\n\n      const predictions = self.buildDetectedObjects(\n        width,\n        height,\n        boxes,\n        scores,\n        indexes,\n        classes\n      )\n      let timeEnd = Date.now()\n      self.fps = Math.round(1000 / (timeEnd - timeBegin))\n\n      return predictions\n\n    })\n\n  }\n\n  buildDetectedObjects(width, height, boxes, scores, indexes, classes) {\n    const count = indexes.length\n    const objects = []\n    for (let i = 0; i < count; i++) {\n      const bbox = []\n      for (let j = 0; j < 4; j++) {\n        bbox[j] = boxes[indexes[i] * 4 + j]\n      }\n      const minY = bbox[0] * height\n      const minX = bbox[1] * width\n      const maxY = bbox[2] * height\n      const maxX = bbox[3] * width\n      bbox[0] = minX\n      bbox[1] = minY\n      bbox[2] = maxX - minX\n      bbox[3] = maxY - minY\n      objects.push({\n        bbox: bbox,\n        class: classes[indexes[i]],\n        score: scores[indexes[i]]\n      })\n    }\n    return objects\n  }\n\n  getFPS() {\n    return this.fps;\n  }\n\n  setModelParameters(params) {\n    this.modelParams = Object.assign({}, this.modelParams, params);\n  }\n\n  getModelParameters() {\n    return this.modelParams;\n  }\n\n  renderPredictions(predictions, canvas, context, mediasource) {\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvas.width = mediasource.width;\n    canvas.height = mediasource.height;\n    // console.log(\"render\", mediasource.width, mediasource.height)\n\n    context.save();\n    if (this.modelParams.flipHorizontal) {\n      context.scale(-1, 1);\n      context.translate(-mediasource.width, 0);\n    }\n    context.drawImage(mediasource, 0, 0, mediasource.width, mediasource.height);\n    context.restore();\n    context.font = '10px Arial';\n\n    // console.log('number of detections: ', predictions.length);\n    for (let i = 0; i < predictions.length; i++) {\n      context.beginPath();\n      context.fillStyle = \"rgba(255, 255, 255, 0.6)\";\n      context.fillRect(predictions[i].bbox[0], predictions[i].bbox[1] - 17, predictions[i].bbox[2], 17)\n      context.rect(...predictions[i].bbox);\n\n      // draw a dot at the center of bounding box\n\n\n      context.lineWidth = 1;\n      context.strokeStyle = '#0063FF';\n      context.fillStyle = \"#0063FF\" // \"rgba(244,247,251,1)\";\n      context.fillRect(predictions[i].bbox[0] + (predictions[i].bbox[2] / 2), predictions[i].bbox[1] + (predictions[i].bbox[3] / 2), 5, 5)\n\n      context.stroke();\n      context.fillText(\n        predictions[i].score.toFixed(3) + ' ' + \" | hand\",\n        predictions[i].bbox[0] + 5,\n        predictions[i].bbox[1] > 10 ? predictions[i].bbox[1] - 5 : 10);\n    }\n\n    // Write FPS to top left\n    context.font = \"bold 12px Arial\"\n    context.fillText(\"[FPS]: \" + this.fps, 10, 20)\n  }\n\n  dispose() {\n    if (this.model) {\n      this.model.dispose();\n    }\n  }\n\n}\n\n\n\nfunction getValidResolution(imageScaleFactor, inputDimension, outputStride) {\n  const evenResolution = inputDimension * imageScaleFactor - 1;\n  return evenResolution - (evenResolution % outputStride) + 1;\n}\n\nfunction getInputTensorDimensions(input) {\n  return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] : [input.height, input.width];\n}\n\nfunction calculateMaxScores(scores, numBoxes, numClasses) {\n  const maxes = [];\n  const classes = [];\n  for (let i = 0; i < numBoxes; i++) {\n    let max = Number.MIN_VALUE;\n    let index = -1;\n    for (let j = 0; j < numClasses; j++) {\n      if (scores[i * numClasses + j] > max) {\n        max = scores[i * numClasses + j];\n        index = j;\n      }\n    }\n    maxes[i] = max;\n    classes[i] = index;\n  }\n  // console.log([maxes, classes])\n  return [maxes, classes];\n}"]},"metadata":{},"sourceType":"module"}